%% Read image
img = imread("./imgs/StackNinja3.bmp");

%% Colour space conversion
hsv = rgb2hsv(img);
% Enhancing the white intensity of the image
hsvImage = hsv(:, :, 1) .* 3;

% Test: Extract the green color channel
greenChannel = img(:,:,2);

figure();
subplot(2,2,1), imshow(hsvImage), title('HSV Colour space conversion ');
subplot(2,2,2), imshow(greenChannel), title('green color channel conversion');

%% Noise Reduction 
% Median Filter
medianFilter = medfilt2(hsvImage, [4 4]);
% this removes pixels that may be red 
[w h] = size(medianFilter);
for i = 1 : w 
    for j = 1 : h
        if (medianFilter(i, j) < 0.1)   
            medianFilter(i,j) = 0;
        end
    end
end


% Test: Gaussian filtering 
kernel = fspecial('gaussian', [2 2], 2.0);
blurredImage = imfilter(hsvImage, kernel);
downSample = imresize(blurredImage, 1/3); % downSample by factor of 3 

% Test: Avg fillter
h = fspecial('average', [2 2]);
avgFilter = imfilter(hsvImage, h);

% Apply anisotropic filtering with default parameters
anisotropic = imdiffusefilt(hsvImage);

% Create the Laplacian filter kernel
laplacian_kernel = fspecial('laplacian');

% Apply the filter to the image
laplacian = imfilter(hsvImage, laplacian_kernel);



figure();
subplot(2,3,1), imshow(medianFilter), title('Median Filter');
subplot(2,3,2), imshow(downSample), title('Gaussian filltering');
subplot(2,3,3), imshow(avgFilter), title('Average filltering');
subplot(2,3,4), imshow(anisotropic), title('Anisotropic filltering');
subplot(2,3,5), imshow(laplacian), title('Laplacian filltering');

%% Thresholding 
% adapative thresholding 
adapt_thresh = adaptthresh(medianFilter, 0.4, "ForegroundPolarity", "bright");
adaptiveThreshold = imbinarize(medianFilter, adapt_thresh);
%subplot(3,3,4), imshow(adaptiveThreshold), title('Adaptive Threshold');

% clearing Small and Unwanted Pixels and then show the final binary image
se_4 = strel("disk", 4);
binaryImg = imopen(adaptiveThreshold, se_4);
im_overlay = labeloverlay(img, binaryImg);

%{
otsuThresh = graythresh(medianFilter);

otsuThreshLocal = adaptthresh(medianFilter, 0.4);

img_bw = imbinarize(medianFilter, otsuThreshLocal);
%}


%% Implementing Watershed
%{
 % Measuring bwdist
 im_bwdist = bwdist(~im_open);
   
 % Inverting values of im_bwdist
 im_bwdist = -im_bwdist;
    
 % Watershed Transformation
 im_watershed = watershed(im_bwdist, 8);
 im_watershed(~im_open) = 0;
    
 % Converting im_watershed to black and white
 im_watershed = logical(im_watershed);

 subplot(3,3,6), imshow(im_watershed), title("Watershed Transformation");

 im_open = imopen(im_watershed, se_4);
 subplot(3,3,7), imshow(im_watershed), title("Image after being Morphological Opened");
%}
  %% colored cell 
  % Perform connected component analysis on the binary image
  cc = bwconncomp(binaryImg);
  labels = labelmatrix(cc);
  
  % Assign random colors to each label using the label2rgb function
  coloredLabels = label2rgb(labels, 'spring', 'k', 'shuffle');

  
  %% ploting the original image, binary and colored image
  figure();
  subplot(1,3,1), imshow(img), title('original image');
  subplot(1,3,2), imshow(binaryImg), title("Binary Image");
  subplot(1,3,3),imshow(coloredLabels); title("Colored Image");
